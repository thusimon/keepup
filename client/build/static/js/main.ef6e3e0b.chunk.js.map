{"version":3,"sources":["components/page-header.js","components/task-card.js","utils/time.js","components/user-tasks.js","components/sign-up-page.js","components/statistics-page.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["PageHeader","to","TaskCard","userId","taskId","taskTitle","signUps","useState","checkDisable","setCheckDisable","useEffect","lastCheckTime","length","lastCheckTimeInt","parseInt","isNaN","time","curTime","Date","now","getFullYear","getMonth","getDate","getTime","isTimeInToday","type","checked","readOnly","onClick","formData","FormData","append","fetch","method","body","then","resp","json","disabled","UserTasks","userName","taskList","setTaskList","res","tasks","console","log","map","task","key","_id","title","sign_up","SignUpPage","users","setUsers","user","name","Statistics","Main","exact","path","component","StatisticsPage","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ef6e3e0b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst PageHeader = () => {\r\n  return (\r\n    <header>\r\n    <nav>\r\n      <ul>\r\n        <li><Link to='/signup'>Sign Up</Link></li>\r\n        <li><Link to='/statistics'>Statistics</Link></li>\r\n      </ul>\r\n    </nav>\r\n  </header>\r\n  )\r\n}\r\n\r\nexport default PageHeader;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {isTimeInToday} from '../utils/time';\r\n\r\nconst TaskCard = ({userId, taskId, taskTitle, signUps}) => {\r\n  // lastCheckTime should UNIX time\r\n  const [checkDisable, setCheckDisable] = useState(true);\r\n  useEffect(() => {\r\n    const lastCheckTime = signUps.length > 0 ? signUps[signUps.length-1] : null;\r\n    const lastCheckTimeInt = parseInt(lastCheckTime);\r\n    if (isNaN(lastCheckTimeInt) || isTimeInToday(lastCheckTimeInt) === -1) {\r\n      // no lastCheckTime or lastCheckTime is before today, should enable check button\r\n      setCheckDisable(false);\r\n    }\r\n  }, [taskId, signUps]);\r\n  const onClickHandler = () => {\r\n    const formData = new FormData();\r\n    formData.append('task_id', taskId);\r\n    formData.append('time_stamp', Date.now());\r\n    fetch('/api/tasks', {\r\n      method: 'PATCH',\r\n      body: formData\r\n    })\r\n    .then(resp => resp.json())\r\n    .then(() => {\r\n      // should disable the check button\r\n      setCheckDisable(true);\r\n    });\r\n  }\r\n  return <div>\r\n    <div>{taskTitle}</div>\r\n    <div>\r\n      <input type=\"checkbox\" checked={checkDisable} readOnly></input>\r\n      <button onClick={onClickHandler} disabled={checkDisable}>Sign Up!</button>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default TaskCard;","export const isTimeInToday = (time) => {\r\n  const curTime = new Date(Date.now());\r\n  const todayStart = new Date(curTime.getFullYear(), curTime.getMonth(), curTime.getDate());\r\n  if (time < todayStart.getTime()) {\r\n    // time is in or before yesterday\r\n    return -1;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport TaskCard from './task-card';\r\n\r\nconst UserTasks = ({userName, userId}) => {\r\n  const [taskList, setTaskList] = useState([]);\r\n  useEffect(()=> {\r\n    fetch(`/api/tasks?userId=${userId}`)\r\n    .then(res => res.json())\r\n    .then(tasks => {\r\n      console.log(\"will set tasks\", tasks);\r\n      setTaskList(tasks);\r\n    })\r\n  }, [userId])\r\n  return <div>\r\n    <div>{userName}</div>\r\n    {\r\n      taskList.map(task => {\r\n        return <TaskCard key={task._id} userId={userId} taskId={task._id} taskTitle={task.title} signUps={task.sign_up} />\r\n      })\r\n    }\r\n  </div>\r\n}\r\n\r\nexport default UserTasks;","import React, {useState, useEffect} from 'react';\r\nimport UserTasks from './user-tasks';\r\n\r\nconst SignUpPage = () => {\r\n  const [users, setUsers] = useState([]);\r\n  useEffect(()=> {\r\n    fetch('/api/users')\r\n    .then(res => res.json())\r\n    .then(users => {\r\n      setUsers(users);\r\n    })\r\n  }, [])\r\n  return <div>\r\n    {\r\n      users.map(user => {\r\n        return <UserTasks key={user._id} userName={user.name} userId={user._id} />\r\n      })\r\n    }\r\n  </div>\r\n}\r\n\r\nexport default SignUpPage;","import React from 'react';\r\n\r\nconst Statistics = () => {\r\n  return <div>\r\n    Coming soon...\r\n  </div>\r\n}\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport SignUpPage from './sign-up-page';\r\nimport StatisticsPage from './statistics-page';\r\n\r\nconst Main = () => {\r\n  return (\r\n    <main>\r\n      <Switch>\r\n        <Route exact path='/' component={SignUpPage}/>\r\n        <Route path='/signup' component={SignUpPage}/>\r\n        <Route path='/statistics' component={StatisticsPage}/>\r\n      </Switch>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport PageHeader from './components/page-header';\nimport Main from './components/main';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <PageHeader />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import { Provider } from 'react-redux'\n//import { createStore } from 'redux'\n//import rootReducer from './reducers/rootReducer'\n\n//const store = createStore(rootReducer)\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}